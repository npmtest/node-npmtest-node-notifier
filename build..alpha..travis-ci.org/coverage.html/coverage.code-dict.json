{"/home/travis/build/npmtest/node-npmtest-node-notifier/test.js":"/* istanbul instrument in package npmtest_node_notifier */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-notifier/lib.npmtest_node_notifier.js":"/* istanbul instrument in package npmtest_node_notifier */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_notifier = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_notifier = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-notifier/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-notifier && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_notifier */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_notifier\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_notifier.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_node_notifier.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_notifier.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_node_notifier.__dirname +\n                    '/lib.npmtest_node_notifier.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-notifier/node-notifier/index.js":"var os = require('os');\nvar utils = require('./lib/utils');\n\n// All notifiers\nvar NotifySend = require('./notifiers/notifysend');\nvar NotificationCenter = require('./notifiers/notificationcenter');\nvar WindowsToaster = require('./notifiers/toaster');\nvar Growl = require('./notifiers/growl');\nvar WindowsBalloon = require('./notifiers/balloon');\n\nvar options = { withFallback: true };\n\nswitch (os.type()) {\n  case 'Linux':\n    module.exports = new NotifySend(options);\n    module.exports.Notification = NotifySend;\n    break;\n  case 'Darwin':\n    module.exports = new NotificationCenter(options);\n    module.exports.Notification = NotificationCenter;\n    break;\n  case 'Windows_NT':\n    if (utils.isLessThanWin8()) {\n      module.exports = new WindowsBalloon(options);\n      module.exports.Notification = WindowsBalloon;\n    } else {\n      module.exports = new WindowsToaster(options);\n      module.exports.Notification = WindowsToaster;\n    }\n    break;\n  default:\n    if (os.type().match(/BSD$/)) {\n      module.exports = new NotifySend(options);\n      module.exports.Notification = NotifySend;\n    } else {\n      module.exports = new Growl(options);\n      module.exports.Notification = Growl;\n    }\n}\n\n// Expose notifiers to give full control.\nmodule.exports.NotifySend = NotifySend;\nmodule.exports.NotificationCenter = NotificationCenter;\nmodule.exports.WindowsToaster = WindowsToaster;\nmodule.exports.WindowsBalloon = WindowsBalloon;\nmodule.exports.Growl = Growl;\n","/home/travis/build/npmtest/node-npmtest-node-notifier/node-notifier/lib/utils.js":"var shellwords = require('shellwords');\nvar cp = require('child_process');\nvar semver = require('semver');\nvar path = require('path');\nvar url = require('url');\nvar os = require('os');\nvar fs = require('fs');\n\nfunction clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nmodule.exports.clone = clone;\n\nvar escapeQuotes = function(str) {\n  if (typeof str === 'string') {\n    return str.replace(/([\"$`\\\\])/g, '\\\\$1');\n  } else {\n    return str;\n  }\n};\n\nvar inArray = function(arr, val) {\n  return arr.indexOf(val) !== -1;\n};\n\nvar notifySendFlags = {\n  u: 'urgency',\n  urgency: 'urgency',\n  t: 'expire-time',\n  e: 'expire-time',\n  expire: 'expire-time',\n  'expire-time': 'expire-time',\n  i: 'icon',\n  icon: 'icon',\n  c: 'category',\n  category: 'category',\n  subtitle: 'category',\n  h: 'hint',\n  hint: 'hint'\n};\n\nmodule.exports.command = function(notifier, options, cb) {\n  notifier = shellwords.escape(notifier);\n  if (process.env.DEBUG) {\n    console.info('node-notifier debug info (command):');\n    console.info('[notifier path]', notifier);\n    console.info('[notifier options]', options.join(' '));\n  }\n\n  return cp.exec(\n    notifier + ' ' + options.join(' '),\n    function(error, stdout, stderr) {\n      if (error) return cb(error);\n      cb(stderr, stdout);\n    }\n  );\n};\n\nmodule.exports.fileCommand = function(notifier, options, cb) {\n  if (process.env.DEBUG) {\n    console.info('node-notifier debug info (fileCommand):');\n    console.info('[notifier path]', notifier);\n    console.info('[notifier options]', options.join(' '));\n  }\n\n  return cp.execFile(notifier, options, function(error, stdout, stderr) {\n    if (error) return cb(error, stdout);\n    cb(stderr, stdout);\n  });\n};\n\nmodule.exports.fileCommandJson = function(notifier, options, cb) {\n  if (process.env.DEBUG) {\n    console.info('node-notifier debug info (fileCommandJson):');\n    console.info('[notifier path]', notifier);\n    console.info('[notifier options]', options.join(' '));\n  }\n  return cp.execFile(notifier, options, function(error, stdout, stderr) {\n    if (error) return cb(error, stdout);\n    if (!stdout) return cb(error, {});\n\n    try {\n      var data = JSON.parse(stdout);\n      cb(stderr, data);\n    } catch (e) {\n      cb(e, stdout);\n    }\n  });\n};\n\nmodule.exports.immediateFileCommand = function(notifier, options, cb) {\n  if (process.env.DEBUG) {\n    console.info('node-notifier debug info (notifier):');\n    console.info('[notifier path]', notifier);\n  }\n\n  notifierExists(notifier, function(exists) {\n    if (!exists) {\n      return cb(new Error('Notifier (' + notifier + ') not found on system.'));\n    }\n    cp.execFile(notifier, options);\n    cb();\n  });\n};\n\nfunction notifierExists(notifier, cb) {\n  return fs.stat(notifier, function(err, stat) {\n    if (!err) return cb(stat.isFile());\n\n    // Check if Windows alias\n    if (path.extname(notifier)) {\n      // Has extentioon, no need to check more\n      return cb(false);\n    }\n\n    // Check if there is an exe file in the directory\n    return fs.stat(notifier + '.exe', function(err, stat) {\n      if (err) return cb(false);\n      cb(stat.isFile());\n    });\n  });\n}\n\nvar mapAppIcon = function(options) {\n  if (options.appIcon) {\n    options.icon = options.appIcon;\n    delete options.appIcon;\n  }\n\n  return options;\n};\n\nvar mapText = function(options) {\n  if (options.text) {\n    options.message = options.text;\n    delete options.text;\n  }\n\n  return options;\n};\n\nvar mapIconShorthand = function(options) {\n  if (options.i) {\n    options.icon = options.i;\n    delete options.i;\n  }\n\n  return options;\n};\n\nmodule.exports.mapToNotifySend = function(options) {\n  options = mapAppIcon(options);\n  options = mapText(options);\n\n  for (var key in options) {\n    if (key === 'message' || key === 'title') continue;\n    if (options.hasOwnProperty(key) && notifySendFlags[key] !== key) {\n      options[notifySendFlags[key]] = options[key];\n      delete options[key];\n    }\n  }\n\n  return options;\n};\n\nmodule.exports.mapToGrowl = function(options) {\n  options = mapAppIcon(options);\n  options = mapIconShorthand(options);\n  options = mapText(options);\n\n  if (options.icon && !Buffer.isBuffer(options.icon)) {\n    try {\n      options.icon = fs.readFileSync(options.icon);\n    } catch (ex) {}\n  }\n\n  return options;\n};\n\nmodule.exports.mapToMac = function(options) {\n  options = mapIconShorthand(options);\n  options = mapText(options);\n\n  if (options.icon) {\n    options.appIcon = options.icon;\n    delete options.icon;\n  }\n\n  if (options.sound === true) {\n    options.sound = 'Bottle';\n  }\n\n  if (options.sound === false) {\n    delete options.sound;\n  }\n\n  if (options.sound && options.sound.indexOf('Notification.') === 0) {\n    options.sound = 'Bottle';\n  }\n\n  if (options.wait === true) {\n    if (!options.timeout) {\n      options.timeout = 5;\n    }\n    delete options.wait;\n  }\n\n  options.json = true;\n  return options;\n};\n\nfunction isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n}\n\nfunction noop() {}\nmodule.exports.actionJackerDecorator = function(emitter, options, fn, mapper) {\n  options = clone(options);\n  fn = fn || noop;\n\n  if (typeof fn !== 'function') {\n    throw new TypeError(\n      'The second argument must be a function callback. You have passed ' +\n        typeof fn\n    );\n  }\n\n  return function(err, data) {\n    var resultantData = data;\n    var metadata = {};\n    // Allow for extra data if resultantData is an object\n    if (resultantData && typeof resultantData === 'object') {\n      metadata = resultantData;\n      resultantData = resultantData.activationType;\n    }\n\n    // Sanitize the data\n    if (resultantData) {\n      resultantData = resultantData.toLowerCase().trim();\n      if (resultantData.match(/^activate|clicked$/)) {\n        resultantData = 'activate';\n      }\n    }\n\n    fn.apply(emitter, [err, resultantData, metadata]);\n    if (!mapper || !resultantData) return;\n\n    var key = mapper(resultantData);\n    if (!key) return;\n    emitter.emit(key, emitter, options, metadata);\n  };\n};\n\nmodule.exports.constructArgumentList = function(options, extra) {\n  var args = [];\n  extra = extra || {};\n\n  // Massive ugly setup. Default args\n  var initial = extra.initial || [];\n  var keyExtra = extra.keyExtra || '';\n  var allowedArguments = extra.allowedArguments || [];\n  var noEscape = extra.noEscape !== void 0;\n  var checkForAllowed = extra.allowedArguments !== void 0;\n  var explicitTrue = !!extra.explicitTrue;\n  var keepNewlines = !!extra.keepNewlines;\n  var wrapper = extra.wrapper === void 0 ? '\"' : extra.wrapper;\n\n  var escapeFn = function(arg) {\n    if (isArray(arg)) {\n      return removeNewLines(arg.join(','));\n    }\n\n    if (!noEscape) {\n      arg = escapeQuotes(arg);\n    }\n    if (typeof arg === 'string' && !keepNewlines) {\n      arg = removeNewLines(arg);\n    }\n    return wrapper + arg + wrapper;\n  };\n\n  initial.forEach(function(val) {\n    args.push(escapeFn(val));\n  });\n  for (var key in options) {\n    if (\n      options.hasOwnProperty(key) &&\n      (!checkForAllowed || inArray(allowedArguments, key))\n    ) {\n      if (explicitTrue && options[key] === true) {\n        args.push('-' + keyExtra + key);\n      } else if (explicitTrue && options[key] === false) continue;\n      else args.push('-' + keyExtra + key, escapeFn(options[key]));\n    }\n  }\n  return args;\n};\n\nfunction removeNewLines(str) {\n  var excapedNewline = process.platform === 'win32' ? '\\\\r\\\\n' : '\\\\n';\n  return str.replace(/\\r?\\n/g, excapedNewline);\n}\n\n/*\n---- Options ----\n[-t] <title string>     | Displayed on the first line of the toast.\n[-m] <message string>   | Displayed on the remaining lines, wrapped.\n[-p] <image URI>        | Display toast with an image, local files only.\n[-w]                    | Wait for toast to expire or activate.\n[-id] <id>              | sets the id for a notification to be able to close it later.\n[-s] <sound URI>        | Sets the sound of the notifications, for possible values see http://msdn.microsoft.com/en-us/library/windows/apps/hh761492.aspx.\n[-silent]               | Don't play a sound file when showing the notifications.\n[-appID] <App.ID>       | Don't create a shortcut but use the provided app id.\n-close <id>             | Closes a currently displayed notification, in order to be able to close a notification the parameter -w must be used to create the notification.\n*/\nvar allowedToasterFlags = [\n  't',\n  'm',\n  'p',\n  'w',\n  'id',\n  's',\n  'silent',\n  'appID',\n  'close',\n  'install'\n];\nvar toasterSoundPrefix = 'Notification.';\nvar toasterDefaultSound = 'Notification.Default';\nmodule.exports.mapToWin8 = function(options) {\n  options = mapAppIcon(options);\n  options = mapText(options);\n\n  if (options.icon) {\n    if (/^file:\\/+/.test(options.icon)) {\n      // should parse file protocol URL to path\n      options.p = url\n        .parse(options.icon)\n        .pathname.replace(/^\\/(\\w:\\/)/, '$1')\n        .replace(/\\//g, '\\\\');\n    } else {\n      options.p = options.icon;\n    }\n    delete options.icon;\n  }\n\n  if (options.message) {\n    // Remove escape char to debug \"HRESULT : 0xC00CE508\" exception\n    options.m = options.message.replace(/\\x1b/g, '');\n    delete options.message;\n  }\n\n  if (options.title) {\n    options.t = options.title;\n    delete options.title;\n  }\n\n  if (options.appName) {\n    options.appID = options.appName;\n    delete options.appName;\n  } else {\n    options.appID = ' ';\n  }\n\n  if (typeof options.appID === 'undefined') {\n    options.appID = ' ';\n  }\n\n  if (typeof options.remove !== 'undefined') {\n    options.close = options.remove;\n    delete options.remove;\n  }\n\n  if (options.quiet || options.silent) {\n    options.silent = options.quiet || options.silent;\n    delete options.quiet;\n  }\n\n  if (typeof options.sound !== 'undefined') {\n    options.s = options.sound;\n    delete options.sound;\n  }\n\n  if (options.s === false) {\n    options.silent = true;\n    delete options.s;\n  }\n\n  // Silent takes precedence. Remove sound.\n  if (options.s && options.silent) {\n    delete options.s;\n  }\n\n  if (options.s === true) {\n    options.s = toasterDefaultSound;\n  }\n\n  if (options.s && options.s.indexOf(toasterSoundPrefix) !== 0) {\n    options.s = toasterDefaultSound;\n  }\n\n  if (options.wait) {\n    options.w = options.wait;\n    delete options.wait;\n  }\n\n  for (var key in options) {\n    // Check if is allowed. If not, delete!\n    if (\n      options.hasOwnProperty(key) && allowedToasterFlags.indexOf(key) === -1\n    ) {\n      delete options[key];\n    }\n  }\n\n  return options;\n};\n\nmodule.exports.mapToNotifu = function(options) {\n  options = mapAppIcon(options);\n  options = mapText(options);\n\n  if (options.icon) {\n    options.i = options.icon;\n    delete options.icon;\n  }\n\n  if (options.message) {\n    options.m = options.message;\n    delete options.message;\n  }\n\n  if (options.title) {\n    options.p = options.title;\n    delete options.title;\n  }\n\n  if (options.time) {\n    options.d = options.time;\n    delete options.time;\n  }\n\n  if (options.q !== false) {\n    options.q = true;\n  } else {\n    delete options.q;\n  }\n\n  if (options.quiet === false) {\n    delete options.q;\n    delete options.quiet;\n  }\n\n  if (options.sound) {\n    delete options.q;\n    delete options.sound;\n  }\n\n  if (options.t) {\n    options.d = options.t;\n    delete options.t;\n  }\n\n  if (options.type) {\n    options.t = sanitizeNotifuTypeArgument(options.type);\n    delete options.type;\n  }\n\n  return options;\n};\n\nmodule.exports.isMac = function() {\n  return os.type() === 'Darwin';\n};\n\nmodule.exports.isMountainLion = function() {\n  return os.type() === 'Darwin' &&\n    semver.satisfies(garanteeSemverFormat(os.release()), '>=12.0.0');\n};\n\nmodule.exports.isWin8 = function() {\n  return os.type() === 'Windows_NT' &&\n    semver.satisfies(garanteeSemverFormat(os.release()), '>=6.2.9200');\n};\n\nmodule.exports.isLessThanWin8 = function() {\n  return os.type() === 'Windows_NT' &&\n    semver.satisfies(garanteeSemverFormat(os.release()), '<6.2.9200');\n};\n\nfunction garanteeSemverFormat(version) {\n  if (version.split('.').length === 2) {\n    version += '.0';\n  }\n  return version;\n}\n\nfunction sanitizeNotifuTypeArgument(type) {\n  if (typeof type === 'string' || type instanceof String) {\n    if (type.toLowerCase() === 'info') return 'info';\n    if (type.toLowerCase() === 'warn') return 'warn';\n    if (type.toLowerCase() === 'error') return 'error';\n  }\n\n  return 'info';\n}\n","/home/travis/build/npmtest/node-npmtest-node-notifier/node-notifier/notifiers/notifysend.js":"/**\n * Node.js wrapper for \"notify-send\".\n */\nvar os = require('os');\nvar which = require('which');\nvar utils = require('../lib/utils');\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar notifier = 'notify-send';\nvar hasNotifier = void 0;\n\nmodule.exports = NotifySend;\n\nfunction NotifySend(options) {\n  options = utils.clone(options || {});\n  if (!(this instanceof NotifySend)) {\n    return new NotifySend(options);\n  }\n\n  this.options = options;\n\n  EventEmitter.call(this);\n}\nutil.inherits(NotifySend, EventEmitter);\n\nfunction noop() {\n}\nNotifySend.prototype.notify = function(options, callback) {\n  options = utils.clone(options || {});\n  callback = callback || noop;\n\n  if (typeof callback !== 'function') {\n    throw new TypeError(\n      'The second argument must be a function callback. You have passed ' +\n        typeof callback\n    );\n  }\n\n  if (typeof options === 'string') {\n    options = { title: 'node-notifier', message: options };\n  }\n\n  if (!options.message) {\n    callback(new Error('Message is required.'));\n    return this;\n  }\n\n  if (os.type() !== 'Linux' && !os.type().match(/BSD$/)) {\n    callback(new Error('Only supported on Linux and *BSD systems'));\n    return this;\n  }\n\n  if (hasNotifier === false) {\n    callback(new Error('notify-send must be installed on the system.'));\n    return this;\n  }\n\n  if (hasNotifier || !!this.options.suppressOsdCheck) {\n    doNotification(options, callback);\n    return this;\n  }\n\n  try {\n    hasNotifier = !!which.sync(notifier);\n    doNotification(options, callback);\n  } catch (err) {\n    hasNotifier = false;\n    return callback(err);\n  }\n\n  return this;\n};\n\nvar allowedArguments = [ 'urgency', 'expire-time', 'icon', 'category', 'hint' ];\n\nfunction doNotification(options, callback) {\n  var initial, argsList;\n\n  options = utils.mapToNotifySend(options);\n  options.title = options.title || 'Node Notification:';\n\n  initial = [ options.title, options.message ];\n  delete options.title;\n  delete options.message;\n\n  argsList = utils.constructArgumentList(options, {\n    initial: initial,\n    keyExtra: '-',\n    allowedArguments: allowedArguments\n  });\n\n  utils.command(notifier, argsList, callback);\n}\n","/home/travis/build/npmtest/node-npmtest-node-notifier/node-notifier/notifiers/notificationcenter.js":"/**\n * A Node.js wrapper for terminal-notify (with fallback).\n */\nvar utils = require('../lib/utils');\nvar Growl = require('./growl');\nvar path = require('path');\nvar notifier = path.join(\n  __dirname,\n  '../vendor/terminal-notifier.app/Contents/MacOS/terminal-notifier'\n);\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar FAILSAFE_TIMEOUT = 30 * 1000;\n\nvar errorMessageOsX = 'You need Mac OS X 10.8 or above to use NotificationCenter,' +\n  ' or use Growl fallback with constructor option {withFallback: true}.';\n\nmodule.exports = NotificationCenter;\n\nfunction NotificationCenter(options) {\n  options = utils.clone(options || {});\n  if (!(this instanceof NotificationCenter)) {\n    return new NotificationCenter(options);\n  }\n  this.options = options;\n\n  EventEmitter.call(this);\n}\nutil.inherits(NotificationCenter, EventEmitter);\nvar activeId = null;\n\nfunction noop() {}\nNotificationCenter.prototype.notify = function(options, callback) {\n  var fallbackNotifier;\n  var id = identificator();\n  options = utils.clone(options || {});\n  activeId = id;\n\n  if (typeof options === 'string') {\n    options = { title: 'node-notifier', message: options };\n  }\n  var timeout;\n\n  callback = callback || noop;\n\n  if (typeof callback !== 'function') {\n    throw new TypeError(\n      'The second argument must be a function callback. You have passed ' +\n        typeof fn\n    );\n  }\n\n  var actionJackedCallback = utils.actionJackerDecorator(\n    this,\n    options,\n    function() {\n      clearTimeout(timeout);\n      callback.apply(null, arguments);\n    },\n    function(data) {\n      if (activeId !== id) return false;\n\n      if (data === 'activate') {\n        return 'click';\n      }\n      if (data === 'timeout') {\n        return 'timeout';\n      }\n      if (data === 'replied') {\n        return 'replied';\n      }\n      return false;\n    }\n  );\n\n  options = utils.mapToMac(options);\n\n  if (!options.message && !options.group && !options.list && !options.remove) {\n    callback(new Error('Message, group, remove or list property is required.'));\n    return this;\n  }\n\n  var argsList = utils.constructArgumentList(options);\n  if (utils.isMountainLion()) {\n    var cp = utils.fileCommandJson(\n      this.options.customPath || notifier,\n      argsList,\n      actionJackedCallback\n    );\n    // Redundancy fallback to prevent memory leak\n    timeout = setTimeout(\n      function() {\n        cp.kill('SIGTERM');\n      },\n      FAILSAFE_TIMEOUT\n    );\n\n    return this;\n  }\n\n  if (fallbackNotifier || !!this.options.withFallback) {\n    fallbackNotifier = fallbackNotifier || new Growl(this.options);\n    return fallbackNotifier.notify(options, callback);\n  }\n\n  callback(new Error(errorMessageOsX));\n  return this;\n};\n\nfunction identificator() {\n  return { _ref: 'val' };\n}\n","/home/travis/build/npmtest/node-npmtest-node-notifier/node-notifier/notifiers/growl.js":"/**\n * Wrapper for the growly module\n */\nvar checkGrowl = require('../lib/checkGrowl');\nvar utils = require('../lib/utils');\nvar growly = require('growly');\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar errorMessageNotFound = \"Couldn't connect to growl (might be used as a fallback). Make sure it is running\";\n\nmodule.exports = Growl;\n\nvar hasGrowl = void 0;\n\nfunction Growl(options) {\n  options = utils.clone(options || {});\n  if (!(this instanceof Growl)) {\n    return new Growl(options);\n  }\n\n  growly.appname = options.name || 'Node';\n  this.options = options;\n\n  EventEmitter.call(this);\n}\nutil.inherits(Growl, EventEmitter);\n\nGrowl.prototype.notify = function(options, callback) {\n  growly.setHost(this.options.host, this.options.port);\n  options = utils.clone(options || {});\n\n  if (typeof options === 'string') {\n    options = { title: 'node-notifier', message: options };\n  }\n\n  callback = utils.actionJackerDecorator(this, options, callback, function(\n    data\n  ) {\n    if (data === 'click') {\n      return 'click';\n    }\n    if (data === 'timedout') {\n      return 'timeout';\n    }\n    return false;\n  });\n\n  options = utils.mapToGrowl(options);\n\n  if (!options.message) {\n    callback(new Error('Message is required.'));\n    return this;\n  }\n\n  options.title = options.title || 'Node Notification:';\n\n  if (hasGrowl || !!options.wait) {\n    var localCallback = options.wait ? callback : noop;\n    growly.notify(options.message, options, localCallback);\n    if (!options.wait) callback();\n    return this;\n  }\n\n  checkGrowl(growly, function(didHaveGrowl) {\n    hasGrowl = didHaveGrowl;\n    if (!didHaveGrowl) return callback(new Error(errorMessageNotFound));\n    growly.notify(options.message, options);\n    callback();\n  });\n  return this;\n};\n\nfunction noop() {\n}\n","/home/travis/build/npmtest/node-npmtest-node-notifier/node-notifier/lib/checkGrowl.js":"var net = require('net');\n\nvar hasGrowl = false;\nmodule.exports = function(growlConfig, cb) {\n  if (typeof cb === 'undefined') {\n    cb = growlConfig;\n    growlConfig = {};\n  }\n  if (hasGrowl) return cb(hasGrowl);\n  var port = growlConfig.port || 23053;\n  var host = growlConfig.host || 'localhost';\n  var socket = net.connect(port, host);\n  socket.setTimeout(100);\n\n  socket.on('connect', function() {\n    socket.end();\n    cb(true);\n  });\n\n  socket.on('error', function() {\n    socket.end();\n    cb(false);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-node-notifier/node-notifier/notifiers/toaster.js":"/**\n * Wrapper for the toaster (https://github.com/nels-o/toaster)\n */\nvar path = require('path');\nvar notifier = path.resolve(__dirname, '../vendor/snoreToast/SnoreToast.exe');\nvar utils = require('../lib/utils');\nvar Balloon = require('./balloon');\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar fallback = void 0;\n\nmodule.exports = WindowsToaster;\n\nfunction WindowsToaster(options) {\n  options = utils.clone(options || {});\n  if (!(this instanceof WindowsToaster)) {\n    return new WindowsToaster(options);\n  }\n\n  this.options = options;\n\n  EventEmitter.call(this);\n}\nutil.inherits(WindowsToaster, EventEmitter);\n\nfunction noop() {\n}\n\nvar timeoutMessage = 'the toast has timed out';\nvar successMessage = 'user clicked on the toast';\n\nfunction hasText(str, txt) {\n  return str && str.indexOf(txt) !== -1;\n}\n\nWindowsToaster.prototype.notify = function(options, callback) {\n  options = utils.clone(options || {});\n  callback = callback || noop;\n\n  if (typeof options === 'string') {\n    options = { title: 'node-notifier', message: options };\n  }\n\n  if (typeof callback !== 'function') {\n    throw new TypeError(\n      'The second argument must be a function callback. You have passed ' +\n        typeof fn\n    );\n  }\n\n  var actionJackedCallback = utils.actionJackerDecorator(\n    this,\n    options,\n    function cb(err, data) {\n      // Needs to filter out timeout. Not an actual error.\n      if (err && hasText(data, timeoutMessage)) {\n        return callback(null, data);\n      }\n      callback(err, data);\n    },\n    function mapper(data) {\n      if (hasText(data, successMessage)) {\n        return 'click';\n      }\n      if (hasText(data, timeoutMessage)) {\n        return 'timeout';\n      }\n      return false;\n    }\n  );\n\n  options.title = options.title || 'Node Notification:';\n  if (\n    typeof options.message === 'undefined' &&\n      typeof options.close === 'undefined'\n  ) {\n    callback(new Error('Message or ID to close is required.'));\n    return this;\n  }\n\n  if (!utils.isWin8() && !!this.options.withFallback) {\n    fallback = fallback || new Balloon(this.options);\n    return fallback.notify(options, callback);\n  }\n\n  options = utils.mapToWin8(options);\n  var argsList = utils.constructArgumentList(options, {\n    explicitTrue: true,\n    wrapper: '',\n    keepNewlines: true,\n    noEscape: true\n  });\n  utils.fileCommand(\n    this.options.customPath || notifier,\n    argsList,\n    actionJackedCallback\n  );\n  return this;\n};\n","/home/travis/build/npmtest/node-npmtest-node-notifier/node-notifier/notifiers/balloon.js":"/**\n * Wrapper for the notifu 1.6 (http://www.paralint.com/projects/notifu/)\n\nUsage\n/t <value>      The type of message to display values are:\n                    info      The message is an informational message\n                    warn      The message is an warning message\n                    error     The message is an error message\n/d <value>      The number of milliseconds to display (omit or 0 for infinit)\n/p <value>      The title (or prompt) of the ballon\n/m <value>      The message text\n/i <value>      Specify an icon to use (\"parent\" uses the icon of the parent process)\n/e              Enable ballon tips in the registry (for this user only)\n/q              Do not play a sound when the tooltip is displayed\n/w              Show the tooltip even if the user is in the quiet period that follows his very first login (Windows 7 and up)\n/xp             Use IUserNotification interface event when IUserNotification2 is available\n\n// Kill codes:\n  2 = Timeout\n  3 = Clicked\n  4 = Closed or faded out\n\n */\nvar path = require('path');\nvar notifier = path.resolve(__dirname, '../vendor/notifu/notifu');\nvar checkGrowl = require('../lib/checkGrowl');\nvar utils = require('../lib/utils');\nvar Toaster = require('./toaster');\nvar Growl = require('./growl');\nvar os = require('os');\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar hasGrowl = void 0;\n\nmodule.exports = WindowsBalloon;\n\nfunction WindowsBalloon(options) {\n  options = utils.clone(options || {});\n  if (!(this instanceof WindowsBalloon)) {\n    return new WindowsBalloon(options);\n  }\n\n  this.options = options;\n\n  EventEmitter.call(this);\n}\nutil.inherits(WindowsBalloon, EventEmitter);\n\nfunction noop() {\n}\nWindowsBalloon.prototype.notify = function(options, callback) {\n  var fallback;\n  var notifierOptions = this.options;\n  options = utils.clone(options || {});\n  callback = callback || noop;\n\n  if (typeof options === 'string') {\n    options = { title: 'node-notifier', message: options };\n  }\n\n  var actionJackedCallback = utils.actionJackerDecorator(\n    this,\n    options,\n    callback,\n    function(data) {\n      if (data === 'activate') {\n        return 'click';\n      }\n      if (data === 'timeout') {\n        return 'timeout';\n      }\n      return false;\n    }\n  );\n\n  if (!!this.options.withFallback && utils.isWin8()) {\n    fallback = fallback || new Toaster(notifierOptions);\n    return fallback.notify(options, callback);\n  }\n\n  if (\n    !!this.options.withFallback &&\n      (!utils.isLessThanWin8() || hasGrowl === true)\n  ) {\n    fallback = fallback || new Growl(notifierOptions);\n    return fallback.notify(options, callback);\n  }\n\n  if (!this.options.withFallback || hasGrowl === false) {\n    doNotification(options, notifierOptions, actionJackedCallback);\n    return this;\n  }\n\n  checkGrowl(notifierOptions, function(hasGrowlResult) {\n    hasGrowl = hasGrowlResult;\n\n    if (hasGrowl) {\n      fallback = fallback || new Growl(notifierOptions);\n      return fallback.notify(options, callback);\n    }\n\n    doNotification(options, notifierOptions, actionJackedCallback);\n  });\n\n  return this;\n};\n\nvar allowedArguments = [ 't', 'd', 'p', 'm', 'i', 'e', 'q', 'w', 'xp' ];\n\nfunction doNotification(options, notifierOptions, callback) {\n  var is64Bit = os.arch() === 'x64';\n  options = options || {};\n  options = utils.mapToNotifu(options);\n  options.p = options.p || 'Node Notification:';\n\n  var fullNotifierPath = notifier + (is64Bit ? '64' : '') + '.exe';\n  var localNotifier = notifierOptions.customPath || fullNotifierPath;\n\n  if (!options.m) {\n    callback(new Error('Message is required.'));\n    return this;\n  }\n\n  var argsList = utils.constructArgumentList(options, {\n    wrapper: '',\n    noEscape: true,\n    explicitTrue: true,\n    allowedArguments: allowedArguments\n  });\n\n  if (options.wait) {\n    return utils.fileCommand(localNotifier, argsList, function(error, data) {\n      var action = fromErrorCodeToAction(error.code);\n      if (action === 'error') return callback(error, data);\n\n      return callback(null, action);\n    });\n  }\n  utils.immediateFileCommand(localNotifier, argsList, callback);\n}\n\nfunction fromErrorCodeToAction(errorCode) {\n  switch (errorCode) {\n    case 2:\n      return 'timeout';\n    case 3:\n    case 6:\n    case 7:\n      return 'activate';\n    case 4:\n      return 'close';\n    default:\n      return 'error';\n  }\n}\n"}